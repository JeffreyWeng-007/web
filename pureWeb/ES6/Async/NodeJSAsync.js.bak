/**
 *
 * 跟着readme节奏走
 *
 * **/

(function () {

  /**PART 1**/
  /*认识回调顺序*/
  setTimeout(console.log, 0, 'a')
  console.log('b')
  console.log('c')
  // 答案是b c a

  /**PART 2**/
  //require，分块加载js。参考：http://www.ruanyifeng.com/blog/2012/11/require_js.html?bsh_bid=230697246
  //html中指定<script data-main="./NodeJSAsync.js" src="http://apps.bdimg.com/libs/require.js/2.1.11/require.min.js"></script>
  /***留个疑问：
   * 1.用npm安装jquery后，以下报错呢...(难道是没有在html中跑？)
   * var $ = require(jquery);
   * $.ajax(XXX)
   * XXXXX
   * 2. import jquery from 'jquery'也不行
   * ***/
  // require.config({
  //   //baseUrl: "js/lib",
  //   paths: {
  //     "jquery": "./jquery-2.1.1.js"
  //   }
  // });
  require(['jquery'],function($) {
    /*jq 新的链式编程*/
    var ajx = $.ajax('data.json')
    ajx.done(function () {
        console.log('PART 2 success')
      })
      .fail(function () {
        console.log('PART 2 jq error')
      })
      .done(function () {
        console.log('PART 2 success2')
      })
    console.log('PART 2' + Object.prototype.toString.call(ajx)) //返回deferred对象

    /*jq 基于callback的ajax异步*/
      var ajax = $.ajax({
        url: 'data.json',
        success: function () {
          console.log('PART 2 success')
        //  doSomething
        },
        error: function () {
          console.log('PART 2 jq error')
        }
      })
      console.log('PART 2' + ajax) //返回XHR对象

    /**PART 3**/
    //链式编程  自己使用Deferred封装一个，改变以往直接在doSomething中写一堆逻辑。
    var waitHandle = () =>
    {
      var dtd = $.Deferred();
      var wait = function (dtd) {
        var task = function () {
          var error = false;
          console.log("PART 3 Deferred执行完成")
          if (!error) {
            dtd.resolve() }//表示异步任务完成
          else {
            dtd.reject() }//表示失败
        }
        setTimeout(task, 2000)
        return dtd
      }
      return wait(dtd)
    }
    var w = waitHandle()
    /*以下是精髓,看打印内容*/
    w.then(function () {
      console.log("PART 3 完成操作")
    },function () {
      console.log("PART 3 错误")
    })
      .then(() => {
        console.log("PART 3 项目经理新业务，直接在这添加，不用改之前代码")
      },function () {
        console.log("PART 3 错误2")
      })
      // .reject() 乱套了，见PART解释

    /**PART 4**/
    //Promise
    var waitHandleProm = () =>
      {
        var dtd = $.Deferred();
        var wait = function (dtd) {
          var task = function () {
            var error = true;
            if (!error) {
              dtd.resolve() }
            else {
              dtd.reject() }
          }
          setTimeout(task, 2000)
          return dtd.promise() /**此处与PART 3 差异**/
        }
        return wait(dtd)
      }
    var w = waitHandleProm()
    /*以下是精髓,看打印内容*/
    //$.when() 函数提供一种方法来执行一个或多个对象的回调函数。
    /**
     * $.when( { testing: 123 } ).done(
     * function(x) { alert(x.testing); } // alerts "123"
     */
    $.when(w)
      .then(function () {
      console.log("PART 4 完成操作")
    },function () {
      console.log("PART 4 错误")
    })
      .then(() => {
        console.log("PART 4 项目经理新业务，直接在这添加，不用改之前代码")
      },function () {
        console.log("PART 4 错误2")
      })
  });

/**PART 5**/
//ES6 Promise
  const wait = function () {
    const promise = new Promise((resolve, reject) => {
      const task = function () {
        var error = true;
        if (!error) {
          resolve() }
        else {
          reject() }
      }
      setTimeout(task, 2000)
    })
    return promise;
  }
  const w = wait();
  w.then( () => {
    console.log("PART 5 ES6 Promise Success")
  },() => {
    console.log("PART 5 ES6 Promise Error")
  })


/**PART 6**/
require(['fs','path'], function (fs, path) {
  const readFilePromise = function (fileName) {
    return new Promise((resolve, reject) => {
      fs.readFile("./data.json", (error, data) => {
        if (err) {
          reject(err)
        } else {
          resolve(data.toString())
        }

      })
    })
  }
  const fullFileName = path.resolve(__dirname, './data.json')
  const result = readFilePromise(fullFileName)
  result.then(data => {
    console.log(data)
    return JSON.parse(data).name /**精华：使用此方式相当于调用的resolve，进行下级传递**/
  }).then(a => {
    console.log("PART 6 参数传递: " + a)
  })
})


})()